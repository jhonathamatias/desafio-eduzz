generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  BUY
  SELL
  PARTIAL_WITHDRAW
  REINVESTMENT
}

enum TransactionDirection {
  CREDIT
  DEBIT
}

enum EmailLogType {
  DEPOSIT
  BUY
  SELL
  GENERIC
}

model Account {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  transactions Transaction[]
  investments  Investment[]

  @@map("accounts")
}

model Currency {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code       String   @unique
  name       String
  symbol     String
  precision  Int
  is_crypto  Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  transactions Transaction[]

  investments_as_base  Investment[] @relation("InvestmentBaseCurrency")
  investments_as_quote Investment[] @relation("InvestmentQuoteCurrency")

  @@map("currencies")
}

model Transaction {
  id          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account_id  String               @db.Uuid
  type        TransactionType
  direction   TransactionDirection
  currency_id String               @db.Uuid
  amount      Decimal              @db.Decimal(18, 8)
  created_at  DateTime             @default(now())

  // Relations
  account    Account     @relation(fields: [account_id], references: [id], onDelete: Cascade)
  currency   Currency    @relation(fields: [currency_id], references: [id])
  investment Investment?

  @@index([account_id, created_at])
  @@index([type, created_at])
  @@map("transactions")
}

model Investment {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account_id        String   @db.Uuid
  transaction_id    String   @unique @db.Uuid
  base_currency_id  String   @db.Uuid
  quote_currency_id String   @db.Uuid
  base_amount       Decimal  @db.Decimal(28, 8) // Quantidade comprada
  quote_amount      Decimal  @db.Decimal(18, 2) // Valor investido (R$)
  price_at_buy      Decimal  @db.Decimal(18, 2) // Pre√ßo do BTC no momento
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  account        Account     @relation(fields: [account_id], references: [id], onDelete: Cascade)
  transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  base_currency  Currency    @relation("InvestmentBaseCurrency", fields: [base_currency_id], references: [id])
  quote_currency Currency    @relation("InvestmentQuoteCurrency", fields: [quote_currency_id], references: [id])

  @@index([account_id, is_active])
  @@map("investments")
}
